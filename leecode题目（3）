#### [3. 无重复字符的最长子串](https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/)
###### 给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。

示例 1:

输入: s = "abcabcbb"
输出: 3 
解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。
示例 2:

输入: s = "bbbbb"
输出: 1
解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。
示例 3:

输入: s = "pwwkew"
输出: 3
解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。
请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。

提示：
0 <= s.length <= 5 * 104
s 由英文字母、数字、符号和空格组成

##### 双指针滑动窗口

```
/**
 * @param {string} s
 * @return {number}
 */
    // if(s.length=0) return 0
    // let target=0
    // let [pl,pr]=[target,s.length-1]
    // while(pl<pr){
    //     const
    // }
    var lengthOfLongestSubstring=function(s){
        let set = new Set()
        //Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用
        //has() 方法返回一个布尔值来指示对应的值value是否存在Set对象中
        //add() 方法用来向一个 Set 对象的末尾添加一个指定的值
        //substring() 方法用于提取字符串中介于两个指定下标之间的字符。
        let left =0;right =0
        let maxRes=""
        while(right<s.length){
            if(!set.has(s[right])){
                set.add(s[right])
                right++

            }else{
                set.delete(s[left])
                left++
            }
            maxRes=maxRes.length>right-left?maxRes:s.substring(right,left)
        }
        return maxRes.length
};
//遍历字符串s,指向第一个元素，如果第二个元素等于第一个元素，将1存入target
//双指针思路 左右指针分别指向第一个元素和第n个元素，当元素相等，left指针推进一位，再次检查，如果相等，则循环以上操作，直至指向n-2个元素，如果还相等，则输出1
//指针开始工作后，如果在第i位出现了
//更改！采用双指针的方式但是整个过程是动态的滑动窗口
```
