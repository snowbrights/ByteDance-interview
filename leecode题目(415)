#### [415. 字符串相加](https://leetcode-cn.com/problems/add-strings/)

#### 双指针大数相加

```javascript
/**
 \* @param {string} num1
 \* @param {string} num2
 \* @return {string}
 */
 //不允许将字符串转换为整数形式，不使用内置函数
//可以进行比对，判断两个字符串的长度，将小的字符串前面补0直到长度等于大的字符串
//使用两个指针分别指向两个字符串的末尾
//charAt() 方法可返回指定位置的字符。


//重要思路：
// 它相当于两个字符串从最右边开始相加，比如我们要计算num1字符串的最右边的那个数字和num2字符串最右边的那个字符相加
// int i = num1.length() - 1, j = num2.length() - 1;
// int x = num1.charAt(i) - '0';
// int y = num2.charAt(j) - '0';
// int sum = x + y;
// 把计算的结果放到一个新的字符串后面，但字符串每一位只能保存一位数字，而我们相加的结果sum可能是个两位数，所以这里我们只取他的个位数，十位数要往前进一位。
比如我们要计算num1和num2的倒数第二位
// int x = num1.charAt(i - 1) - '0';
// int y = num2.charAt(j - 1) - '0';
// int sum = x + y + carry;

var addStrings = function(num1, num2) {

  let i = num1.length-1;
  let j = num2.length-1;
  let carry = 0;
  let res=[];

  while(i>=0||j>=0||carry!=0){
    let x = num1[i] ? num1[i]-0 : 0;
    let y = num2[j] ? num2[j]-0 : 0;
    let sum = x+y+carry;
    res.push(sum%10);
    //Array.push()向数组添加一个新项目
    carry=Math.floor(sum/10);
    //Math.floor() 返回小于或等于一个给定数字的最大整数（理解为向下取整）
    i--;
    j--;
  }

  return res.reverse().join("");
  //Array.join()将数组元素转换为字符串
};

```

